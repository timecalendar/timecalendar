/* tslint:disable */
/* eslint-disable */
/**
 * TimeCalendar
 * TimeCalendar API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

export interface CalendarEventCustomFields {
    'canceled'?: boolean;
    'shortDescription'?: string;
    'subject'?: string;
    'groupColor'?: string;
}
export interface CalendarEventForPublic {
    'type': EventTypeEnum;
    'color': string;
    'groupColor': string;
    'uid': string;
    'title': string;
    'startsAt': string;
    'endsAt': string;
    'location': string | null;
    'allDay': boolean;
    'description': string | null;
    'teachers': Array<string>;
    'tags': Array<EventTag>;
    'fields': CalendarEventCustomFields | null;
    'exportedAt': string;
}


export interface CalendarForPublic {
    'id': string;
    'token': string;
    'name': string;
    'schoolName': string | null;
    'schoolId'?: string;
    'lastUpdatedAt': string;
    'createdAt': string;
}
export interface CalendarWithContent {
    'calendar': CalendarForPublic;
    'events': Array<CalendarEventForPublic>;
}
export interface CreateCalendarDto {
    'url': string;
    'schoolId'?: string;
    'schoolName'?: string;
    'name'?: string;
    'customData': object | null;
}
export interface CreateCalendarRepDto {
    'token': string;
}
export interface EventTag {
    'name': string;
    'color': string;
    'icon': string;
}

export const EventTypeEnum = {
    Cm: 'cm',
    Td: 'td',
    Tp: 'tp',
    Tp2: 'tp2',
    Project: 'project',
    Exam: 'exam',
    Class: 'class'
} as const;

export type EventTypeEnum = typeof EventTypeEnum[keyof typeof EventTypeEnum];


export interface FindSchoolGroupsRepDto {
    'groups': Array<SchoolGroupItem>;
}
export interface FindSchoolsRepDto {
    'schools': Array<SchoolForList>;
}
export interface GetSchoolGroupsIcalUrlDto {
    'groups': Array<string>;
}
export interface GetSchoolGroupsIcalUrlRepDto {
    'url': string;
}
export interface OrleansGetIcalUrlFromStudentNumberDto {
    'studentNumber': string;
}
export interface SchoolAssistant {
    'slug': string;
    'requireIntranetAccess': boolean;
    'requireCalendarName': boolean;
    'isNative': boolean;
}
export interface SchoolForList {
    'assistant': SchoolAssistant;
    'fallbackAssistant'?: SchoolAssistant;
    'id': string;
    'code': string;
    'name': string;
    'siteUrl': string;
    'imageUrl': string;
    'intranetUrl': string | null;
    'visible': boolean;
    'createdAt': string;
    'updatedAt': string;
    'deletedAt'?: string;
}
export interface SchoolGroupItem {
    'text': string;
    'value': string;
    'children': Array<SchoolGroupItem>;
}
export interface SendMessageDto {
    'email': string;
    'message': string;
    'calendarIds'?: Array<string>;
    'schoolId'?: string;
    'schoolName'?: string;
    'gradeName'?: string;
    'deviceInfo'?: string;
    'calendarUrl'?: string;
}
export interface SetSchoolGroupDto {
    'groups': Array<SchoolGroupItem>;
    'icalUrl': string;
}
export interface SyncCalendarsDto {
    'tokens': Array<string>;
}

/**
 * CalendarsApi - axios parameter creator
 */
export const CalendarsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find a calendar by its token
         * @param {string} token The calendar token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCalendarByToken: async (token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('findCalendarByToken', 'token', token)
            const localVarPath = `/calendars/by-token/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a calendar
         * @param {CreateCalendarDto} createCalendarDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCalendar: async (createCalendarDto: CreateCalendarDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCalendarDto' is not null or undefined
            assertParamExists('createCalendar', 'createCalendarDto', createCalendarDto)
            const localVarPath = `/calendars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCalendarDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sync calendars
         * @param {SyncCalendarsDto} syncCalendarsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncCalendars: async (syncCalendarsDto: SyncCalendarsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'syncCalendarsDto' is not null or undefined
            assertParamExists('syncCalendars', 'syncCalendarsDto', syncCalendarsDto)
            const localVarPath = `/calendars/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(syncCalendarsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CalendarsApi - functional programming interface
 */
export const CalendarsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CalendarsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Find a calendar by its token
         * @param {string} token The calendar token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findCalendarByToken(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalendarForPublic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findCalendarByToken(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CalendarsApi.findCalendarByToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a calendar
         * @param {CreateCalendarDto} createCalendarDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCalendar(createCalendarDto: CreateCalendarDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCalendarRepDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCalendar(createCalendarDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CalendarsApi.createCalendar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Sync calendars
         * @param {SyncCalendarsDto} syncCalendarsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncCalendars(syncCalendarsDto: SyncCalendarsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CalendarWithContent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncCalendars(syncCalendarsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CalendarsApi.syncCalendars']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CalendarsApi - factory interface
 */
export const CalendarsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CalendarsApiFp(configuration)
    return {
        /**
         * 
         * @summary Find a calendar by its token
         * @param {string} token The calendar token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCalendarByToken(token: string, options?: RawAxiosRequestConfig): AxiosPromise<CalendarForPublic> {
            return localVarFp.findCalendarByToken(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a calendar
         * @param {CreateCalendarDto} createCalendarDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCalendar(createCalendarDto: CreateCalendarDto, options?: RawAxiosRequestConfig): AxiosPromise<CreateCalendarRepDto> {
            return localVarFp.createCalendar(createCalendarDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sync calendars
         * @param {SyncCalendarsDto} syncCalendarsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncCalendars(syncCalendarsDto: SyncCalendarsDto, options?: RawAxiosRequestConfig): AxiosPromise<Array<CalendarWithContent>> {
            return localVarFp.syncCalendars(syncCalendarsDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CalendarsApi - object-oriented interface
 */
export class CalendarsApi extends BaseAPI {
    /**
     * 
     * @summary Find a calendar by its token
     * @param {string} token The calendar token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public findCalendarByToken(token: string, options?: RawAxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).findCalendarByToken(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a calendar
     * @param {CreateCalendarDto} createCalendarDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createCalendar(createCalendarDto: CreateCalendarDto, options?: RawAxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).createCalendar(createCalendarDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sync calendars
     * @param {SyncCalendarsDto} syncCalendarsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public syncCalendars(syncCalendarsDto: SyncCalendarsDto, options?: RawAxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).syncCalendars(syncCalendarsDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContactApi - axios parameter creator
 */
export const ContactApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Contact the developers
         * @param {SendMessageDto} sendMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage: async (sendMessageDto: SendMessageDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendMessageDto' is not null or undefined
            assertParamExists('sendMessage', 'sendMessageDto', sendMessageDto)
            const localVarPath = `/contact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendMessageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactApi - functional programming interface
 */
export const ContactApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Contact the developers
         * @param {SendMessageDto} sendMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMessage(sendMessageDto: SendMessageDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMessage(sendMessageDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactApi.sendMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContactApi - factory interface
 */
export const ContactApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactApiFp(configuration)
    return {
        /**
         * 
         * @summary Contact the developers
         * @param {SendMessageDto} sendMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(sendMessageDto: SendMessageDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendMessage(sendMessageDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactApi - object-oriented interface
 */
export class ContactApi extends BaseAPI {
    /**
     * 
     * @summary Contact the developers
     * @param {SendMessageDto} sendMessageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public sendMessage(sendMessageDto: SendMessageDto, options?: RawAxiosRequestConfig) {
        return ContactApiFp(this.configuration).sendMessage(sendMessageDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SchoolsApi - axios parameter creator
 */
export const SchoolsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find a school
         * @param {string} schoolId The school id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSchool: async (schoolId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('findSchool', 'schoolId', schoolId)
            const localVarPath = `/schools/{schoolId}`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find list of schools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSchools: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schools`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find school groups
         * @param {string} schoolId The school id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSchoolGroups: async (schoolId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('findSchoolGroups', 'schoolId', schoolId)
            const localVarPath = `/schools/{schoolId}/school-group`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get school groups ICal URL
         * @param {string} schoolId The school id
         * @param {GetSchoolGroupsIcalUrlDto} getSchoolGroupsIcalUrlDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolGroupsIcalUrl: async (schoolId: string, getSchoolGroupsIcalUrlDto: GetSchoolGroupsIcalUrlDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('getSchoolGroupsIcalUrl', 'schoolId', schoolId)
            // verify required parameter 'getSchoolGroupsIcalUrlDto' is not null or undefined
            assertParamExists('getSchoolGroupsIcalUrl', 'getSchoolGroupsIcalUrlDto', getSchoolGroupsIcalUrlDto)
            const localVarPath = `/schools/{schoolId}/school-group/ical`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getSchoolGroupsIcalUrlDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set school groups
         * @param {string} schoolId The school id
         * @param {SetSchoolGroupDto} setSchoolGroupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSchoolGroups: async (schoolId: string, setSchoolGroupDto: SetSchoolGroupDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('setSchoolGroups', 'schoolId', schoolId)
            // verify required parameter 'setSchoolGroupDto' is not null or undefined
            assertParamExists('setSchoolGroups', 'setSchoolGroupDto', setSchoolGroupDto)
            const localVarPath = `/schools/{schoolId}/school-group`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setSchoolGroupDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the ICal URL from a student number
         * @param {OrleansGetIcalUrlFromStudentNumberDto} orleansGetIcalUrlFromStudentNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcalUrlFromStudentNumber: async (orleansGetIcalUrlFromStudentNumberDto: OrleansGetIcalUrlFromStudentNumberDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orleansGetIcalUrlFromStudentNumberDto' is not null or undefined
            assertParamExists('getIcalUrlFromStudentNumber', 'orleansGetIcalUrlFromStudentNumberDto', orleansGetIcalUrlFromStudentNumberDto)
            const localVarPath = `/schools/univ-orleans/students`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orleansGetIcalUrlFromStudentNumberDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchoolsApi - functional programming interface
 */
export const SchoolsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchoolsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Find a school
         * @param {string} schoolId The school id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findSchool(schoolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolForList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findSchool(schoolId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchoolsApi.findSchool']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Find list of schools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findSchools(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindSchoolsRepDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findSchools(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchoolsApi.findSchools']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Find school groups
         * @param {string} schoolId The school id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findSchoolGroups(schoolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindSchoolGroupsRepDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findSchoolGroups(schoolId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchoolsApi.findSchoolGroups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get school groups ICal URL
         * @param {string} schoolId The school id
         * @param {GetSchoolGroupsIcalUrlDto} getSchoolGroupsIcalUrlDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchoolGroupsIcalUrl(schoolId: string, getSchoolGroupsIcalUrlDto: GetSchoolGroupsIcalUrlDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSchoolGroupsIcalUrlRepDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchoolGroupsIcalUrl(schoolId, getSchoolGroupsIcalUrlDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchoolsApi.getSchoolGroupsIcalUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set school groups
         * @param {string} schoolId The school id
         * @param {SetSchoolGroupDto} setSchoolGroupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setSchoolGroups(schoolId: string, setSchoolGroupDto: SetSchoolGroupDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setSchoolGroups(schoolId, setSchoolGroupDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchoolsApi.setSchoolGroups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the ICal URL from a student number
         * @param {OrleansGetIcalUrlFromStudentNumberDto} orleansGetIcalUrlFromStudentNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIcalUrlFromStudentNumber(orleansGetIcalUrlFromStudentNumberDto: OrleansGetIcalUrlFromStudentNumberDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIcalUrlFromStudentNumber(orleansGetIcalUrlFromStudentNumberDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchoolsApi.getIcalUrlFromStudentNumber']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SchoolsApi - factory interface
 */
export const SchoolsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchoolsApiFp(configuration)
    return {
        /**
         * 
         * @summary Find a school
         * @param {string} schoolId The school id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSchool(schoolId: string, options?: RawAxiosRequestConfig): AxiosPromise<SchoolForList> {
            return localVarFp.findSchool(schoolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find list of schools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSchools(options?: RawAxiosRequestConfig): AxiosPromise<FindSchoolsRepDto> {
            return localVarFp.findSchools(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find school groups
         * @param {string} schoolId The school id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSchoolGroups(schoolId: string, options?: RawAxiosRequestConfig): AxiosPromise<FindSchoolGroupsRepDto> {
            return localVarFp.findSchoolGroups(schoolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get school groups ICal URL
         * @param {string} schoolId The school id
         * @param {GetSchoolGroupsIcalUrlDto} getSchoolGroupsIcalUrlDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolGroupsIcalUrl(schoolId: string, getSchoolGroupsIcalUrlDto: GetSchoolGroupsIcalUrlDto, options?: RawAxiosRequestConfig): AxiosPromise<GetSchoolGroupsIcalUrlRepDto> {
            return localVarFp.getSchoolGroupsIcalUrl(schoolId, getSchoolGroupsIcalUrlDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set school groups
         * @param {string} schoolId The school id
         * @param {SetSchoolGroupDto} setSchoolGroupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSchoolGroups(schoolId: string, setSchoolGroupDto: SetSchoolGroupDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setSchoolGroups(schoolId, setSchoolGroupDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the ICal URL from a student number
         * @param {OrleansGetIcalUrlFromStudentNumberDto} orleansGetIcalUrlFromStudentNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcalUrlFromStudentNumber(orleansGetIcalUrlFromStudentNumberDto: OrleansGetIcalUrlFromStudentNumberDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getIcalUrlFromStudentNumber(orleansGetIcalUrlFromStudentNumberDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchoolsApi - object-oriented interface
 */
export class SchoolsApi extends BaseAPI {
    /**
     * 
     * @summary Find a school
     * @param {string} schoolId The school id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public findSchool(schoolId: string, options?: RawAxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).findSchool(schoolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find list of schools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public findSchools(options?: RawAxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).findSchools(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find school groups
     * @param {string} schoolId The school id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public findSchoolGroups(schoolId: string, options?: RawAxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).findSchoolGroups(schoolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get school groups ICal URL
     * @param {string} schoolId The school id
     * @param {GetSchoolGroupsIcalUrlDto} getSchoolGroupsIcalUrlDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getSchoolGroupsIcalUrl(schoolId: string, getSchoolGroupsIcalUrlDto: GetSchoolGroupsIcalUrlDto, options?: RawAxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).getSchoolGroupsIcalUrl(schoolId, getSchoolGroupsIcalUrlDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set school groups
     * @param {string} schoolId The school id
     * @param {SetSchoolGroupDto} setSchoolGroupDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public setSchoolGroups(schoolId: string, setSchoolGroupDto: SetSchoolGroupDto, options?: RawAxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).setSchoolGroups(schoolId, setSchoolGroupDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the ICal URL from a student number
     * @param {OrleansGetIcalUrlFromStudentNumberDto} orleansGetIcalUrlFromStudentNumberDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getIcalUrlFromStudentNumber(orleansGetIcalUrlFromStudentNumberDto: OrleansGetIcalUrlFromStudentNumberDto, options?: RawAxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).getIcalUrlFromStudentNumber(orleansGetIcalUrlFromStudentNumberDto, options).then((request) => request(this.axios, this.basePath));
    }
}



