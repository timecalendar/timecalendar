/* tslint:disable */
/* eslint-disable */
/**
 * TimeCalendar
 * TimeCalendar API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CalendarEventForPublic
 */
export interface CalendarEventForPublic {
    /**
     * 
     * @type {string}
     * @memberof CalendarEventForPublic
     */
    'color': string;
    /**
     * 
     * @type {string}
     * @memberof CalendarEventForPublic
     */
    'groupColor': string;
    /**
     * 
     * @type {string}
     * @memberof CalendarEventForPublic
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof CalendarEventForPublic
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CalendarEventForPublic
     */
    'startsAt': string;
    /**
     * 
     * @type {string}
     * @memberof CalendarEventForPublic
     */
    'endsAt': string;
    /**
     * 
     * @type {string}
     * @memberof CalendarEventForPublic
     */
    'location': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CalendarEventForPublic
     */
    'allDay': boolean;
    /**
     * 
     * @type {string}
     * @memberof CalendarEventForPublic
     */
    'description': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CalendarEventForPublic
     */
    'teachers': Array<string>;
    /**
     * 
     * @type {Array<object>}
     * @memberof CalendarEventForPublic
     */
    'tags': Array<object>;
    /**
     * 
     * @type {string}
     * @memberof CalendarEventForPublic
     */
    'type': CalendarEventForPublicTypeEnum;
    /**
     * 
     * @type {object}
     * @memberof CalendarEventForPublic
     */
    'fields': object | null;
    /**
     * 
     * @type {string}
     * @memberof CalendarEventForPublic
     */
    'exportedAt': string;
}

export const CalendarEventForPublicTypeEnum = {
    Cm: 'cm',
    Td: 'td',
    Tp: 'tp',
    Tp2: 'tp2',
    Project: 'project',
    Exam: 'exam',
    Class: 'class'
} as const;

export type CalendarEventForPublicTypeEnum = typeof CalendarEventForPublicTypeEnum[keyof typeof CalendarEventForPublicTypeEnum];

/**
 * 
 * @export
 * @interface CalendarForPublic
 */
export interface CalendarForPublic {
    /**
     * 
     * @type {string}
     * @memberof CalendarForPublic
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CalendarForPublic
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CalendarForPublic
     */
    'schoolName': string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendarForPublic
     */
    'schoolId': string;
    /**
     * 
     * @type {string}
     * @memberof CalendarForPublic
     */
    'lastUpdatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof CalendarForPublic
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface CalendarWithContent
 */
export interface CalendarWithContent {
    /**
     * 
     * @type {CalendarForPublic}
     * @memberof CalendarWithContent
     */
    'calendar': CalendarForPublic;
    /**
     * 
     * @type {Array<CalendarEventForPublic>}
     * @memberof CalendarWithContent
     */
    'events': Array<CalendarEventForPublic>;
}
/**
 * 
 * @export
 * @interface CreateCalendarDto
 */
export interface CreateCalendarDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCalendarDto
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCalendarDto
     */
    'schoolId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCalendarDto
     */
    'schoolName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCalendarDto
     */
    'name'?: string;
    /**
     * 
     * @type {object}
     * @memberof CreateCalendarDto
     */
    'customData': object | null;
}
/**
 * 
 * @export
 * @interface CreateCalendarRepDto
 */
export interface CreateCalendarRepDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCalendarRepDto
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface FindSchoolsRepDto
 */
export interface FindSchoolsRepDto {
    /**
     * 
     * @type {Array<SchoolForList>}
     * @memberof FindSchoolsRepDto
     */
    'schools': Array<SchoolForList>;
}
/**
 * 
 * @export
 * @interface OrleansGetIcalUrlFromStudentNumberDto
 */
export interface OrleansGetIcalUrlFromStudentNumberDto {
    /**
     * 
     * @type {string}
     * @memberof OrleansGetIcalUrlFromStudentNumberDto
     */
    'studentNumber': string;
}
/**
 * 
 * @export
 * @interface SchoolAssistant
 */
export interface SchoolAssistant {
    /**
     * 
     * @type {string}
     * @memberof SchoolAssistant
     */
    'slug': string;
    /**
     * 
     * @type {boolean}
     * @memberof SchoolAssistant
     */
    'requireIntranetAccess': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchoolAssistant
     */
    'requireCalendarName': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchoolAssistant
     */
    'isNative': boolean;
}
/**
 * 
 * @export
 * @interface SchoolForList
 */
export interface SchoolForList {
    /**
     * 
     * @type {SchoolAssistant}
     * @memberof SchoolForList
     */
    'assistant': SchoolAssistant;
    /**
     * 
     * @type {SchoolAssistant}
     * @memberof SchoolForList
     */
    'fallbackAssistant'?: SchoolAssistant;
    /**
     * 
     * @type {string}
     * @memberof SchoolForList
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolForList
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolForList
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolForList
     */
    'siteUrl': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolForList
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolForList
     */
    'intranetUrl': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SchoolForList
     */
    'visible': boolean;
    /**
     * 
     * @type {string}
     * @memberof SchoolForList
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolForList
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolForList
     */
    'deletedAt'?: string;
}
/**
 * 
 * @export
 * @interface SyncCalendarsDto
 */
export interface SyncCalendarsDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof SyncCalendarsDto
     */
    'tokens': Array<string>;
}

/**
 * CalendarsApi - axios parameter creator
 * @export
 */
export const CalendarsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateCalendarDto} createCalendarDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCalendar: async (createCalendarDto: CreateCalendarDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCalendarDto' is not null or undefined
            assertParamExists('createCalendar', 'createCalendarDto', createCalendarDto)
            const localVarPath = `/calendars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCalendarDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SyncCalendarsDto} syncCalendarsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncCalendars: async (syncCalendarsDto: SyncCalendarsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'syncCalendarsDto' is not null or undefined
            assertParamExists('syncCalendars', 'syncCalendarsDto', syncCalendarsDto)
            const localVarPath = `/calendars/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(syncCalendarsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CalendarsApi - functional programming interface
 * @export
 */
export const CalendarsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CalendarsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateCalendarDto} createCalendarDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCalendar(createCalendarDto: CreateCalendarDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCalendarRepDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCalendar(createCalendarDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SyncCalendarsDto} syncCalendarsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncCalendars(syncCalendarsDto: SyncCalendarsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CalendarWithContent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncCalendars(syncCalendarsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CalendarsApi - factory interface
 * @export
 */
export const CalendarsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CalendarsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateCalendarDto} createCalendarDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCalendar(createCalendarDto: CreateCalendarDto, options?: any): AxiosPromise<CreateCalendarRepDto> {
            return localVarFp.createCalendar(createCalendarDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SyncCalendarsDto} syncCalendarsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncCalendars(syncCalendarsDto: SyncCalendarsDto, options?: any): AxiosPromise<Array<CalendarWithContent>> {
            return localVarFp.syncCalendars(syncCalendarsDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CalendarsApi - object-oriented interface
 * @export
 * @class CalendarsApi
 * @extends {BaseAPI}
 */
export class CalendarsApi extends BaseAPI {
    /**
     * 
     * @param {CreateCalendarDto} createCalendarDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApi
     */
    public createCalendar(createCalendarDto: CreateCalendarDto, options?: AxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).createCalendar(createCalendarDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SyncCalendarsDto} syncCalendarsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApi
     */
    public syncCalendars(syncCalendarsDto: SyncCalendarsDto, options?: AxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).syncCalendars(syncCalendarsDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SchoolsApi - axios parameter creator
 * @export
 */
export const SchoolsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find a school
         * @param {string} schoolId The school id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSchool: async (schoolId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('findSchool', 'schoolId', schoolId)
            const localVarPath = `/schools/{schoolId}`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find list of schools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSchools: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schools`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OrleansGetIcalUrlFromStudentNumberDto} orleansGetIcalUrlFromStudentNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcalUrlFromStudentNumber: async (orleansGetIcalUrlFromStudentNumberDto: OrleansGetIcalUrlFromStudentNumberDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orleansGetIcalUrlFromStudentNumberDto' is not null or undefined
            assertParamExists('getIcalUrlFromStudentNumber', 'orleansGetIcalUrlFromStudentNumberDto', orleansGetIcalUrlFromStudentNumberDto)
            const localVarPath = `/schools/univ-orleans/students`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orleansGetIcalUrlFromStudentNumberDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchoolsApi - functional programming interface
 * @export
 */
export const SchoolsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchoolsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Find a school
         * @param {string} schoolId The school id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findSchool(schoolId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolForList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findSchool(schoolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find list of schools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findSchools(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindSchoolsRepDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findSchools(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OrleansGetIcalUrlFromStudentNumberDto} orleansGetIcalUrlFromStudentNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIcalUrlFromStudentNumber(orleansGetIcalUrlFromStudentNumberDto: OrleansGetIcalUrlFromStudentNumberDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIcalUrlFromStudentNumber(orleansGetIcalUrlFromStudentNumberDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchoolsApi - factory interface
 * @export
 */
export const SchoolsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchoolsApiFp(configuration)
    return {
        /**
         * 
         * @summary Find a school
         * @param {string} schoolId The school id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSchool(schoolId: string, options?: any): AxiosPromise<SchoolForList> {
            return localVarFp.findSchool(schoolId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find list of schools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSchools(options?: any): AxiosPromise<FindSchoolsRepDto> {
            return localVarFp.findSchools(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrleansGetIcalUrlFromStudentNumberDto} orleansGetIcalUrlFromStudentNumberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcalUrlFromStudentNumber(orleansGetIcalUrlFromStudentNumberDto: OrleansGetIcalUrlFromStudentNumberDto, options?: any): AxiosPromise<void> {
            return localVarFp.getIcalUrlFromStudentNumber(orleansGetIcalUrlFromStudentNumberDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchoolsApi - object-oriented interface
 * @export
 * @class SchoolsApi
 * @extends {BaseAPI}
 */
export class SchoolsApi extends BaseAPI {
    /**
     * 
     * @summary Find a school
     * @param {string} schoolId The school id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApi
     */
    public findSchool(schoolId: string, options?: AxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).findSchool(schoolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find list of schools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApi
     */
    public findSchools(options?: AxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).findSchools(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrleansGetIcalUrlFromStudentNumberDto} orleansGetIcalUrlFromStudentNumberDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApi
     */
    public getIcalUrlFromStudentNumber(orleansGetIcalUrlFromStudentNumberDto: OrleansGetIcalUrlFromStudentNumberDto, options?: AxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).getIcalUrlFromStudentNumber(orleansGetIcalUrlFromStudentNumberDto, options).then((request) => request(this.axios, this.basePath));
    }
}


