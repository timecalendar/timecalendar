import "../../Fastfile"

def google_service_account_json_path
  root_path + '/../ci/keys/google_service_account.json'
end

default_platform(:android)

platform :android do

  # Build flutter Android app
  lane :build do |options|
    # Verify 'firebase_app_distribution_service_account.json' file exists
    unless File.exist?(google_service_account_json_path)
      UI.user_error!("google_service_account.json file not found. Please add it to `/ci/keys/google_service_account.json`.")
    end

    # Verify version number is correct
    if !is_ci && (!options[:version_number])
      version_number = get_version_from_pubspec()
      continue = UI.confirm("Deploying version #{version_number} to Play Store. Continue?")

      unless continue
        UI.user_error!("Aborted")
      end
    end

    build_flutter_app(
      type: options[:type] || "appbundle",
      no_codesign: options[:no_codesign],
      config_only: options[:config_only],
      build_number: options[:build_number],
      version_number: options[:version_number],
      store: "playstore",
      environment: options[:environment] || "production"
    )
  end

  # Release to Play Store using Fastlane Supply (https://docs.fastlane.tools/actions/supply/)
  desc "Release to Play Store"
  lane :release_play_store do |options|
    begin
      build(
        no_codesign: options[:no_codesign],
        config_only: options[:config_only],
        build_number: options[:build_number],
        version_number: options[:version_number],
        environment: options[:environment] || "production"
      )

      supply(
        track: 'internal',
        aab: "../build/app/outputs/bundle/release/app-release.aab",
        json_key: google_service_account_json_path,
        skip_upload_apk: true, # Upload the aab instead of apk
        skip_upload_metadata: true,
        skip_upload_changelogs: true,
        skip_upload_images: true,
        skip_upload_screenshots: true
      )
    end
  end
end